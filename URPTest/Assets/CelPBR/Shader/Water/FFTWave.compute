// from https://github.com/Straw1997/FFTOcean/blob/master/FFTOcean/Assets/Shaders/FFTCS.compute

#pragma kernel ComputeGaussianRandom
#pragma kernel ComputeHeightFrequencySpectrum
#pragma kernel ComputeDisplaceFrequencySpectrum
#pragma kernel FFTHorizontal
#pragma kernel FFTHorizontalEnd
#pragma kernel FFTVertical
#pragma kernel FFTVerticalEnd
#pragma kernel ComputeDisplace
#pragma kernel ComputeNormalAndBubble

#define PI 3.14159274f
#define G 9.81f

int N; // fft texture size
float WaterSize;
float A; //phillips spectrum parameter, influence the wave height
float4 WindAndSeed; // xy is wind, zw is two random seed
float Time;
int Ns;	//Ns = pow(2,m-1); m is stage number
float Lambda; // influence offset
float HeightScale;
float BubbleScale;
float BubbleThreshold;

RWTexture2D<float4> _GaussianRandomRT; // gaussian random rt
RWTexture2D<float4> _HeightFrequencySpectrumRT;
RWTexture2D<float4> _DisplaceXFrequencySpectrumRT;
RWTexture2D<float4> _DisplaceZFrequencySpectrumRT;
RWTexture2D<float4> _DisplaceRT;
RWTexture2D<float4> _InputRT;
RWTexture2D<float4> _OutputRT;
RWTexture2D<float4> _NormalRT;
RWTexture2D<float4> _BubbleRT;

uint rngState; //random

// random seed
uint WangHash(uint seed)
{
    seed = (seed ^ 61) ^(seed >> 16);
    seed *= 9;
    seed = seed ^(seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^(seed >> 15);
    return seed;
}

// caculate uniform distribution random [0,1)
float Rand()
{
    // Xorshift algorithm
    // from https://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/#wide-and-deep
    rngState ^= (rngState << 13);
    rngState ^= (rngState >> 17);
    rngState ^= (rngState << 5);
    return rngState / 4294967296.0f;;
}

float2 Gaussian(float2 id)
{
    //uniform distribution random
    rngState = WangHash(id.y * N + id.x);
    float x1 = Rand();
    float x2 = Rand();

    x1 = max(1e-6f, x1);
    x2 = max(1e-6f, x2);
    
    // calculate two independent Gaussian random numbers
    // Box-Muller
    float g1 = sqrt(-2.0f * log(x1)) * cos(2.0f * PI * x2);
    float g2 = sqrt(-2.0f * log(x1)) * sin(2.0f * PI * x2);

    return float2(g1, g2);
}

float Dispersion(float2 k)
{
    return sqrt(G * length(k));
}

//Donelan-Banner
float DonelanBannerDirectionalSpreading(float2 k)
{
    float betaS;
    float omegap = 0.855f * G / length(WindAndSeed.xy);
    float ratio = Dispersion(k) / omegap;

    if (ratio < 0.95f)
    {
        betaS = 2.61f * pow(ratio, 1.3f);
    }
    if(ratio >= 0.95f && ratio < 1.6f)
    {
        betaS = 2.28f * pow(ratio, -1.3f);
    }
    if(ratio > 1.6f)
    {
        float epsilon = -0.4f + 0.8393f * exp(-0.567f * log(ratio * ratio));
        betaS = pow(10, epsilon);
    }
    float theta = atan2(k.y, k.x) - atan2(WindAndSeed.y, WindAndSeed.x);

    return betaS / max(1e-7f, 2.0f * tanh(betaS * PI) * pow(cosh(betaS * theta), 2));
}

float dispersion(float2 k)
{
    return sqrt(G * length(k));
}

// caculate Phillips spectrum
float Phillips(float2 k)
{
    float kLength = length(k);
    kLength = max(0.001f, kLength);
    // kLength = 1;
    float kLength2 = kLength * kLength;
    float kLength4 = kLength2 * kLength2;

    float windLength = length(WindAndSeed.xy);
    float  l = windLength * windLength / G;
    float l2 = l * l;

    float damping = 0.001f;
    float L2 = l2 * damping * damping;

    //phillips spectrum
    return  A * exp(-1.0f / (kLength2 * l2)) / kLength4 * exp(-kLength2 * L2);
}

float2 ComplexMultiply(float2 c1, float2 c2)
{
    return float2(c1.x * c2.x - c1.y * c2.y,
    c1.x * c2.y + c1.y * c2.x);
}

[numthreads(8, 8, 1)]
void ComputeGaussianRandom(uint3 id : SV_DispatchThreadID)
{
    float2 gaussian = Gaussian(id.xy);
    _GaussianRandomRT[id.xy] = float4(gaussian, 0, 0);
}

[numthreads(8, 8, 1)]
void ComputeHeightFrequencySpectrum(uint3 id : SV_DispatchThreadID)
{
    float2 k = float2(2.0f * PI * id.x / N - PI, 2.0f * PI * id.y / N - PI);

    float2 gaussian = _GaussianRandomRT[id.xy].xy;

    float2 hTilde0 = gaussian * sqrt(abs(Phillips(k) * DonelanBannerDirectionalSpreading(k)) / 2.0f);
    float2 hTilde0Conj = gaussian * sqrt(abs(Phillips(-k) * DonelanBannerDirectionalSpreading(-k)) / 2.0f);
    hTilde0Conj.y *= -1.0f;

    float omegat = dispersion(k) * Time;
    float c = cos(omegat);
    float s = sin(omegat);
    
    float2 h1 = ComplexMultiply(hTilde0, float2(c, s));
    float2 h2 = ComplexMultiply(hTilde0Conj, float2(c, -s));

    float2 HTilde = h1 + h2;

    _HeightFrequencySpectrumRT[id.xy] = float4(HTilde, 0, 0);
}

[numthreads(8, 8, 1)]
void ComputeDisplaceFrequencySpectrum(uint3 id: SV_DispatchThreadID)
{
    float2 k = float2(2 * PI * id.x / N - PI, 2 * PI * id.y / N - PI);
    k /= max(0.001f, length(k));
    float2 HTilde = _HeightFrequencySpectrumRT[id.xy].xy;

    float2 KxHTilde = ComplexMultiply(float2(0, -k.x), HTilde);
    float2 kzHTilde = ComplexMultiply(float2(0, -k.y), HTilde);

    _DisplaceXFrequencySpectrumRT[id.xy] = float4(KxHTilde, 0, 0);
    _DisplaceZFrequencySpectrumRT[id.xy] = float4(kzHTilde, 0, 0);
}

// horizontal FFT, only for 0 to m-1 stage
[numthreads(8, 8, 1)]
void FFTHorizontal(uint3 id: SV_DispatchThreadID)
{
    int2 idxs = id.xy;
    idxs.x = floor(id.x / (Ns * 2.0f)) * Ns + id.x % Ns;
    float angle = 2.0f * PI * (id.x / (Ns * 2.0f));
    float2 w = float2(cos(angle), sin(angle));

    float2 x0 = _InputRT[idxs].xy;
    float2 x1 = _InputRT[int2(idxs.x + N * 0.5f, idxs.y)].xy;

    float2 output = x0 + float2(w.x * x1.x - w.y * x1.y, w.x * x1.y + w.y * x1.x);
    _OutputRT[id.xy] = float4(output, 0, 0);
}
// horizontal fft final stage
[numthreads(8, 8, 1)]
void FFTHorizontalEnd(uint3 id: SV_DispatchThreadID)
{
    int2 idxs = id.xy;
    idxs.x = floor(id.x / (Ns * 2.0f)) * Ns + id.x % Ns;
    float angle = 2.0f * PI * (id.x / (Ns * 2.0f));
    float2 w = float2(cos(angle), sin(angle));

    w *= -1;

    float2 x0 = _InputRT[idxs].xy;
    float2 x1 = _InputRT[int2(idxs.x + N * 0.5f, idxs.y)].xy;

    float2 output = x0 + float2(w.x * x1.x - w.y * x1.y, w.x * x1.y + w.y * x1.x);

    int x = id.x - N * 0.5f;
    output *= ((x + 1) % 2.0f) * 1 + (x % 2.0f) * (-1);

    _OutputRT[id.xy] = float4(output, 0, 0);
}

// vertical FFT, only for 0 to m-1 stage
[numthreads(8, 8, 1)]
void FFTVertical(uint3 id: SV_DispatchThreadID)
{
    int2 idxs = id.xy;
    idxs.y = floor(id.y / (Ns * 2.0f)) * Ns + id.y % Ns;
    float angle = 2.0f * PI * (id.y / (Ns * 2.0f));
    float2 w = float2(cos(angle), sin(angle));

    float2 x0 = _InputRT[idxs].xy;
    float2 x1 = _InputRT[int2(idxs.x, idxs.y + N * 0.5f)].xy;

    float2 output = x0 + float2(w.x * x1.x - w.y * x1.y, w.x * x1.y + w.y * x1.x);
    _OutputRT[id.xy] = float4(output, 0, 0);
}

// vertical fft final stage
[numthreads(8, 8, 1)]
void FFTVerticalEnd(uint3 id: SV_DispatchThreadID)
{
    int2 idxs = id.xy;
    idxs.y = floor(id.y / (Ns * 2.0f)) * Ns + id.y % Ns;
    float angle = 2.0f * PI * (id.y / (Ns * 2.0f));
    float2 w = float2(cos(angle), sin(angle));

    w *= -1;

    float2 x0 = _InputRT[idxs].xy;
    float2 x1 = _InputRT[int2(idxs.x, idxs.y + N * 0.5f)].xy;

    float2 output = x0 + float2(w.x * x1.x - w.y * x1.y, w.x * x1.y + w.y * x1.x);
    int x = id.y - N * 0.5f;
    output *= ((x + 1) % 2.0f) * 1 + (x % 2.0f) * (-1);
    _OutputRT[id.xy] = float4(output, 0, 0);
}

//生成偏移纹理
[numthreads(8, 8, 1)]
void ComputeDisplace(uint3 id: SV_DispatchThreadID)
{
    float y = length(_HeightFrequencySpectrumRT[id.xy].xy) / (N * N) * HeightScale;
    float x = length(_DisplaceXFrequencySpectrumRT[id.xy].xy) / (N * N) * Lambda;
    float z = length(_DisplaceZFrequencySpectrumRT[id.xy].xy) / (N * N) * Lambda;
    
    _HeightFrequencySpectrumRT[id.xy] = float4(y, y, y, 0);
    _DisplaceXFrequencySpectrumRT[id.xy] = float4(x, x, x, 0);
    _DisplaceZFrequencySpectrumRT[id.xy] = float4(z, z, z, 0);
    _DisplaceRT[id.xy] = float4(x, y, z, 0);
}

// generate normal and bubbles
[numthreads(8, 8, 1)]
void ComputeNormalAndBubble(uint3 id: SV_DispatchThreadID)
{
    float uintLength = WaterSize / (N - 1.0f);
    uint2 uvX1 = uint2((id.x - 1.0f + N) % N, id.y);
    uint2 uvX2 = uint2((id.x + 1.0f + N) % N, id.y);
    uint2 uvZ1 = uint2(id.x, (id.y - 1.0f + N) % N);
    uint2 uvZ2 = uint2(id.x, (id.y + 1.0f + N) % N);

    float3 x1D = _DisplaceRT[uvX1].xyz;
    float3 x2D = _DisplaceRT[uvX2].xyz;
    float3 z1D = _DisplaceRT[uvZ1].xyz;
    float3 z2D = _DisplaceRT[uvZ2].xyz;

    float3 x1 = float3(x1D.x - uintLength, x1D.yz);
    float3 x2 = float3(x2D.x + uintLength, x2D.yz);
    float3 z1 = float3(z1D.xy, z1D.z - uintLength);
    float3 z2 = float3(z1D.xy, z1D.z + uintLength);

    float3 tangentX = x2 - x1;
    float3 tangentZ = z2 - z1;
    float3 normal = normalize(cross(tangentZ, tangentX));
    // normal = normal * 0.5 + 0.5;


    float3 ddx = x2D - x1D;
    float3 ddz = z2D - z1D;
    float jacobian = (1.0f + ddx.x) * (1.0f + ddz.z) - ddx.z * ddz.x;

    jacobian = saturate(max(0, BubbleThreshold - saturate(jacobian)) * BubbleScale);

    _NormalRT[id.xy] = float4(normal, 0);
    _BubbleRT[id.xy] = float4(jacobian, jacobian, jacobian, 0);
}